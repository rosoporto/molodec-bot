import os
from telebot import TeleBot, types
from utils.handler_json import HandlerJson
from dotenv import load_dotenv
from utils.get_logger import logger as log
import datetime


load_dotenv(override=True)
tg_token = os.getenv("TG_TOKEN")
bot = TeleBot(tg_token)

handler_json = HandlerJson()
data = handler_json.load_data


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message: types.Message):
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã–∑–≤–∞–ª /start")
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç '–ú–û–õ–û–î–ï–¶'. –î–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫—É —Å /new_habit!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new_habit
@bot.message_handler(commands=['new_habit'])
def new_habit(message: types.Message):
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–∑–≤–∞–ª /new_habit")
    bot.reply_to(message, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É!üëá")
    bot.register_next_step_handler(message, save_habit)


def save_habit(message: types.Message):
    user_id = str(message.chat.id)
    habit = message.text.strip()
    if not habit:
        log.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –ø—É—Å—Ç—É—é –ø—Ä–∏–≤—ã—á–∫—É")
        bot.reply_to(message, "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —Å /new_habit")
        return

    data[user_id] = {
        "habit": habit,
        "progress": "",
        "day": 0,
        "last_date": ""
    }
    handler_json.load_data = data
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–∏–≤—ã—á–∫—É: {habit}")
    bot.reply_to(message, f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit}' –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞—á–Ω–∏ —Å /done, –∫–æ–≥–¥–∞ —Å–¥–µ–ª–∞–µ—à—å –ø–µ—Ä–≤—ã–π —à–∞–≥!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done
@bot.message_handler(commands=['done'])
def done(message: types.Message):
    user_id = str(message.chat.id)
    if user_id not in data:
        log.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /done –±–µ–∑ –ø—Ä–∏–≤—ã—á–∫–∏")
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫—É —Å /new_habit!")
        return

    today = datetime.date.today().isoformat()
    last_date = data[user_id]["last_date"]

    # –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞
    if data[user_id]["day"] == 0:
        data[user_id]["progress"] = "–ú"
        data[user_id]["day"] = 1
        data[user_id]["last_date"] = today
        progress_bar = "‚úÖ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú"
        log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø—Ä–∏–≤—ã—á–∫—É '{data[user_id]['habit']}'")
        bot.reply_to(message, f"–°—Ç–∞—Ä—Ç! '{data[user_id]['habit']}': –ú {progress_bar} (1/7). –¢—ã –º–æ–ª–æ–¥–µ—Ü!")
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
        if last_date:
            last = datetime.date.fromisoformat(last_date)
            diff = (datetime.date.fromisoformat(today) - last).days
            if diff > 1:
                data[user_id]["progress"] = ""
                data[user_id]["day"] = 0
                data[user_id]["last_date"] = today
                log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –¥–µ–Ω—å, –ø—Ä–∏–≤—ã—á–∫–∞ '{data[user_id]['habit']}' —Å–±—Ä–æ—à–µ–Ω–∞")
                bot.reply_to(message, f"–ü—Ä–æ–ø—É—Å–∫ –±–æ–ª—å—à–µ –¥–Ω—è! '{data[user_id]['habit']}' —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /done!")
                handler_json.load_data = data
                return

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        data[user_id]["day"] += 1
        letters = "–ú–û–õ–û–î–ï–¶"
        data[user_id]["progress"] = letters[:data[user_id]["day"]]
        data[user_id]["last_date"] = today
        progress_bar = "‚úÖ" * data[user_id]["day"] + "‚¨ú" * (7 - data[user_id]["day"])

        if data[user_id]["day"] == 7:
            log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–∏–≤—ã—á–∫—É '{data[user_id]['habit']}'")
            bot.reply_to(message, f"–¢–´ –°–î–ï–õ–ê–õ –≠–¢–û! üéâ '{data[user_id]['habit']}': –ú–û–õ–û–î–ï–¶ {progress_bar}. –ù–æ–≤—ã–π —Ü–∏–∫–ª ‚Äî —Å /done!")
            data[user_id]["progress"] = ""
            data[user_id]["day"] = 0
        else:
            log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–¥–≤–∏–Ω—É–ª—Å—è: {data[user_id]['progress']} ({data[user_id]['day']}/7)")
            bot.reply_to(message, f"–ö—Ä—É—Ç–æ! '{data[user_id]['habit']}': {data[user_id]['progress']} {progress_bar} ({data[user_id]['day']}/7). –û–≥–æ–Ω—å!")

    handler_json.load_data = data


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /skip
@bot.message_handler(commands=['skip'])
def skip(message: types.Message):
    user_id = str(message.chat.id)
    if user_id not in data:
        log.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /skip –±–µ–∑ –ø—Ä–∏–≤—ã—á–∫–∏")
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫—É —Å /new_habit!")
        return
    if data[user_id]["day"] == 0:
        log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /skip, –Ω–æ —Ü–∏–∫–ª –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç")
        bot.reply_to(message, f"–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª '{data[user_id]['habit']}'! –°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å /done!")
        return

    data[user_id]["progress"] = ""
    data[user_id]["day"] = 0
    data[user_id]["last_date"] = datetime.date.today().isoformat()
    handler_json.load_data = data
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–±—Ä–æ—Å–∏–ª –ø—Ä–∏–≤—ã—á–∫—É '{data[user_id]['habit']}' —á–µ—Ä–µ–∑ /skip")
    bot.reply_to(message, f"'{data[user_id]['habit']}' —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /done, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /progress
@bot.message_handler(commands=['progress'])
def progress(message: types.Message):
    user_id = str(message.chat.id)
    if user_id not in data:
        log.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /progress –±–µ–∑ –ø—Ä–∏–≤—ã—á–∫–∏")
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –ø—Ä–∏–≤—ã—á–∫—É —Å /new_habit!")
        return

    habit = data[user_id]["habit"]
    if data[user_id]["day"] == 0:
        log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ü–∏–∫–ª –Ω–µ –Ω–∞—á–∞—Ç")
        bot.reply_to(message, f"–ü—Ä–∏–≤—ã—á–∫–∞: '{habit}'. –ü–æ–∫–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å /done!")
    else:
        progress_bar = "‚úÖ" * data[user_id]["day"] + "‚¨ú" * (7 - data[user_id]["day"])
        log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≥—Ä–µ—Å—Å: {data[user_id]['progress']} ({data[user_id]['day']}/7)")
        bot.reply_to(message, f"–ü—Ä–∏–≤—ã—á–∫–∞: '{habit}'\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {data[user_id]['progress']} {progress_bar} ({data[user_id]['day']}/7)")


if __name__ == "__main__":
    log.info("Bot starting!")
    bot.infinity_polling(skip_pending=True)
